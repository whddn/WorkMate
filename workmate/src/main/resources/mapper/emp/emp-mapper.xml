<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.workmate.app.employee.mapper.EmpMapper">
	<!-- 사원 전체 조회 (조직도/사원이름/부서명) -->
	<select id="selectAllEmpList" resultType="EmpVO">
	  SELECT 
	      USER_NO
	      , USER_NAME
	      , USER_MAIL
	      , USER_PHONE
	  FROM EMPLOYEE
	  ORDER BY USER_NO
	</select>
	<!-- 이미 부서장으로 등록된 사원 조회 쿼리 -->
	<select id="selectDepartmentHeadList" resultType="Integer">
	    SELECT d.DEPARTMENT_HEAD
	    FROM DEPARTMENT d
	    WHERE d.DEPARTMENT_HEAD IS NOT NULL
	</select>
	
	<!--/* 조직도의 사원 상세 조회 */-->
	<select id="selectEmpById" resultType="EmpVO">
		SELECT u.user_name
		        , d.department_name
		        , d.department_id
		        , t.team_name
                , u.team_no
		        , u.user_position
		        , u.user_no
		        , u.user_id
		        , u.hire_date
		        , u.resign_date
		        , u.user_phone
		        , u.address
		        , u.user_ip
		        , u.common_ip
		        , u.user_mail
		FROM employee u 
		LEFT JOIN team t 
		ON u.team_no = t.team_no
        LEFT JOIN department d 
		ON t.department_id = d.department_id
		WHERE u.user_no = #{userNo}
	</select>
	

	<!-- 직급 조회 -->
	<select id="selectEmpPositionList" resultType="EmpVO">
		SELECT code_name
			, code
		FROM common_code
		WHERE group_code = '0Q' 
		AND code IS NOT NULL
        AND code LIKE '%q%'
	</select>
	
	<!-- 사원 등록 --> 
	<insert id="insertEmployee" parameterType="EmpVO">
		<selectKey keyProperty="userNo"
				   resultType="Integer"
				   order="BEFORE">
		 SELECT MAX(USER_NO) + 1
         FROM EMPLOYEE
         WHERE USER_NO BETWEEN 200 AND 700
		</selectKey>
		INSERT INTO employee 
					(
    					 USER_NO
                       , USER_NAME
    				   , TEAM_NO
    				   , USER_POSITION
    				   , USER_ID
    				   , USER_PWD
    				   , USER_PHONE
    				   , ADDRESS
    				   , USER_MAIL
    				   , HIRE_DATE
    				   , STATUS_USER
					) 
		VALUES 		
					(
						#{userNo}
                      , #{userName}
					  , #{teamNo}
					  , ( SELECT CODE_NAME
					  	  FROM COMMON_CODE
					  	  WHERE CODE = #{userPosition} )
					  , 'user' || #{userNo}
					  , #{userPwd}
					  , #{userPhone}
					  , #{address}
					  , 'user' || #{userNo} || '@example.com'
					  , SYSDATE
					  , '재직'
					)
	</insert>
	<!-- 사원 수정 -->
	<update id="updateEmployee" parameterType="EmpVO">
		UPDATE employee 
		SET
              USER_NAME = #{userName}
            , TEAM_NO =  #{teamNo}
            , HIRE_DATE = #{hireDate}
    		, USER_POSITION = #{userPosition}
    		, USER_PHONE = #{userPhone}
    		, ADDRESS = #{address}

        WHERE user_no = #{userNo}
	</update>
	
    <!-- 부서 및 팀별 사원 조회 -->
	<select id="selectEmpNameList" resultMap="departTeamMap">
		SELECT 
		          d.department_id
		        , d.department_name
		        , t.team_no
		        , t.team_name
		        , e.user_name
		        , e.user_id
		        , e.user_no
		FROM team t
		LEFT JOIN department d
		ON t.department_id = d.department_id
		LEFT JOIN employee e 
		ON e.team_no = t.team_no
		ORDER BY e.user_no
	</select>
	
		<!-- collection -->
	<resultMap id="departTeamMap" type="DepartmentVO">	
		<id property="departmentId" column="department_id" />
		<result property="departmentName" column="department_name" />
			<collection property="teamList" ofType="TeamVO">
				<result property="teamNo" column="team_no" />
				<result property="teamName" column="team_name" />
					<collection property="empList" ofType="EmpVO">
						<result property="userName" column="user_name" />
						<result property="userNo" column="user_no" />
					</collection>
			</collection>
	</resultMap> 
	<!-- 해당 폼에 어떤 항목들이 있는지 -->
	<select id="selectEvaluList" resultType="EvaluVO">
		SELECT i.EVALU_SUMMARY
		      , ef.EVALU_NO
		      , i.EVALU_COMPET
		      , i.EVALU_CONTENT
		      , f.EVALU_NAME
		 FROM EVALU_ITEM i 
		 JOIN EVALU_FORMAT ef
		   ON i.EVALU_ITEM_NO = ef.EVALU_ITEM_NO
		 JOIN EVALU_FORM f 
		   ON f.EVALU_FORM_NO = ef.EVALU_FORM_NO
		WHERE f.EVALU_FORM_NO = #{evaluFormNo}
	</select>

	<!-- 지난 평가 리스트 조회 (전체 출력 / 관리자) -->
	<select id="selectBeforeEvaluList" resultType="EvaluVO">
        SELECT f.EVALU_NAME
            , f.FORM_STATUS 
            , f.EVALU_START
            , f.EVALU_END
            , f.EVALU_FORM_NO
            , t.team_name
            , t.team_no
        
		FROM EVALU_FORM f
        JOIN EVALUATEE_GROUP eg
        ON eg.EVALU_FORM_NO = f.EVALU_FORM_NO 
        JOIN EMPLOYEE u
        ON u.USER_NO = eg.USER_NO
        JOIN TEAM t
        ON t.TEAM_NO = u.TEAM_NO
		ORDER BY f.EVALU_FORM_NO DESC
	</select>
	<!--  내가 평가자로서 진행한 평가 항목 + 점수 단건 조회 (formNo, userNo 기준)-->
	<select id="selectMyEvaluingById" resultType="EvaluVO">
		  SELECT 
			    ee.USER_NO
			    , ee.USER_NAME             
			    , i.EVALU_COMPET                       
			    , i.EVALU_CONTENT                      
			    , r.EVALU_SCORE AS evaluScore         
			    , fm.ORDER_NO                           
		  FROM EVALU_RESULT r
		  JOIN EVALU_GROUP eg 
		    ON r.EVALU_GROUP_ID = eg.EVALU_GROUP_ID         
		  JOIN EVALUATEE_GROUP eeg 
		    ON r.EVALUATEE_GROUP_ID = eeg.EVALUATEE_GROUP_ID  
		  JOIN EMPLOYEE ee 
		    ON eeg.USER_NO = ee.USER_NO                        
		  JOIN EVALU_FORMAT fm 
		    ON r.EVALU_NO = fm.EVALU_NO
		  JOIN EVALU_ITEM i ON fm.EVALU_ITEM_NO = i.EVALU_ITEM_NO
		  WHERE eg.USER_NO = #{userNo}                                        
		    AND r.EVALU_FORM_NO = #{evaluFormNo}          
		  ORDER BY ee.USER_NO, fm.ORDER_NO
		
	</select>
	<!-- 평가 결과 단순 조회 (관리자, formNo 기반) -->
		<select id="selectAdminBeforeEvaluById" resultType="EvaluVO">
				SELECT    
			      f.EVALU_FORM_NO,
			      f.EVALU_NAME,              
			      f.EVALU_START,
			      f.EVALU_DESCRIPT,               
			      u.USER_NO,
			      u.USER_NAME,          
			      i.EVALU_COMPET,       
			      i.EVALU_CONTENT,
			      fm.ORDER_NO,
			      d.DEPARTMENT_NAME,
			      t.TEAM_NAME,
			      fm.EVALU_NO,
			      r.EVALU_SCORE,  
				      (
				        SELECT ROUND(AVG(r2.EVALU_SCORE), 1)
				        FROM EVALU_RESULT r2
				        JOIN EVALU_FORMAT fm2 ON r2.EVALU_NO = fm2.EVALU_NO
				        WHERE fm2.EVALU_ITEM_NO = i.EVALU_ITEM_NO
				          AND r2.EVALU_FORM_NO = f.EVALU_FORM_NO
				      ) AS avgScore
				FROM EVALU_FORM f              
				JOIN EVALUATEE_GROUP g ON f.EVALU_FORM_NO = g.EVALU_FORM_NO
				JOIN EMPLOYEE u ON g.USER_NO = u.USER_NO        
				JOIN EVALU_FORMAT fm ON fm.EVALU_FORM_NO = f.EVALU_FORM_NO  
				JOIN EVALU_ITEM i ON i.EVALU_ITEM_NO = fm.EVALU_ITEM_NO 
				JOIN TEAM t ON t.TEAM_NO = u.TEAM_NO
				JOIN DEPARTMENT d ON t.DEPARTMENT_ID = d.DEPARTMENT_ID
				JOIN EVALU_RESULT r ON r.EVALU_NO = fm.EVALU_NO
				                    AND r.EVALU_FORM_NO = f.EVALU_FORM_NO
                                    AND r.EVALUATEE_GROUP_ID = g.EVALUATEE_GROUP_ID
				
				WHERE f.EVALU_FORM_NO = #{evaluFormNo}
				ORDER BY u.USER_NO
			
	</select>
	
	<!-- 관리자 단건 조회 - 개인에 대한 결과 쿼리문 -->
	<select id="selectAdminBeforeUserEvaluById"  parameterType="EvaluVO" resultType="EvaluVO">
					SELECT 
						    f.EVALU_FORM_NO,
						    f.EVALU_NAME,
						    f.EVALU_START,
						    u.USER_NO,
						    u.USER_NAME,
						    i.EVALU_COMPET,
						    i.EVALU_CONTENT,
						    fm.ORDER_NO,
						    d.DEPARTMENT_NAME,
						    t.TEAM_NAME,
						    fm.EVALU_NO,
						    
						    -- 평균 점수 (선택 유저 기준)
						    ROUND(AVG(r.EVALU_SCORE), 1) AS avgScore,
						
						    -- 다른 피평가자들의 평균 점수 (JOIN으로 가져옴)
						    ROUND(other.avg_score, 1) AS otherAvgScore
						
						FROM EVALU_FORM f
						JOIN EVALUATEE_GROUP eg ON f.EVALU_FORM_NO = eg.EVALU_FORM_NO
						JOIN EMPLOYEE u ON eg.USER_NO = u.USER_NO
						JOIN EVALU_FORMAT fm ON fm.EVALU_FORM_NO = f.EVALU_FORM_NO
						JOIN EVALU_ITEM i ON i.EVALU_ITEM_NO = fm.EVALU_ITEM_NO
						JOIN TEAM t ON t.TEAM_NO = u.TEAM_NO
						JOIN DEPARTMENT d ON d.DEPARTMENT_ID = t.DEPARTMENT_ID
						JOIN EVALU_RESULT r ON r.EVALU_NO = fm.EVALU_NO
						                    AND r.EVALU_FORM_NO = f.EVALU_FORM_NO
						                    AND r.EVALUATEE_GROUP_ID = eg.EVALUATEE_GROUP_ID
						LEFT JOIN (
						    SELECT 
						        fm2.EVALU_ITEM_NO,
						        r2.EVALU_FORM_NO,
						        ROUND(AVG(r2.EVALU_SCORE), 1) AS avg_score
						    FROM EVALU_RESULT r2
						    JOIN EVALUATEE_GROUP eg2 ON r2.EVALUATEE_GROUP_ID = eg2.EVALUATEE_GROUP_ID
						    JOIN EVALU_FORMAT fm2 ON r2.EVALU_NO = fm2.EVALU_NO
						    WHERE eg2.USER_NO != #{userNo}
						    GROUP BY fm2.EVALU_ITEM_NO, r2.EVALU_FORM_NO
						) other
						    ON fm.EVALU_ITEM_NO = other.EVALU_ITEM_NO
						   AND f.EVALU_FORM_NO = other.EVALU_FORM_NO
						
						WHERE f.EVALU_FORM_NO = #{evaluFormNo}
						  AND u.USER_NO = #{userNo}
						
						GROUP BY 
						    f.EVALU_FORM_NO, f.EVALU_NAME, f.EVALU_START,
						    u.USER_NO, u.USER_NAME,
						    i.EVALU_COMPET, i.EVALU_CONTENT,
						    fm.ORDER_NO,
						    d.DEPARTMENT_NAME, t.TEAM_NAME,
						    fm.EVALU_NO,
						    other.avg_score
						
						ORDER BY fm.ORDER_NO

	</select>
	<!-- 관리자 평가 단건 조회(등록된 평가 조회용도) -->
	<select id="selectInEvaluForm" resultType="EvaluVO">
		SELECT    
			      f.EVALU_FORM_NO,
			      f.EVALU_NAME,              
			      f.EVALU_START,
			      f.EVALU_DESCRIPT,               
			      u.USER_NO,
			      u.USER_NAME,          
			      i.EVALU_COMPET,       
			      i.EVALU_CONTENT,
			      fm.ORDER_NO,
			      d.DEPARTMENT_NAME,
			      t.TEAM_NAME,
			      fm.EVALU_NO

				FROM EVALU_FORM f              
				JOIN EVALUATEE_GROUP g ON f.EVALU_FORM_NO = g.EVALU_FORM_NO
				JOIN EMPLOYEE u ON g.USER_NO = u.USER_NO        
				JOIN EVALU_FORMAT fm ON fm.EVALU_FORM_NO = f.EVALU_FORM_NO  
				JOIN EVALU_ITEM i ON i.EVALU_ITEM_NO = fm.EVALU_ITEM_NO 
				JOIN TEAM t ON t.TEAM_NO = u.TEAM_NO
				JOIN DEPARTMENT d ON t.DEPARTMENT_ID = d.DEPARTMENT_ID
				
				WHERE f.EVALU_FORM_NO = #{evaluFormNo}
				ORDER BY u.USER_NO
	</select>
	<!-- 진행할 평가 조회 1건 / 내가 평가자 그룹으로 등록되어 있는 폼에 대한 피평가자 정보와 등록된 평가폼 조회 -->
	<select id="selectOneEvaluById" resultType="EvaluVO">
		SELECT
		    f.EVALU_FORM_NO
		    , f.EVALU_NAME
		    , g.USAGE_STATUS
		    , f.EVALU_DESCRIPT
		    , fm.ORDER_NO
		    , fm.EVALU_NO
		    , i.EVALU_ITEM_NO
		    , i.EVALU_COMPET
		    , i.EVALU_CONTENT
		    , u.USER_NO          
		    , u.USER_NAME
		    , t.TEAM_NAME
		    , d.DEPARTMENT_NAME
		    , evalUser.USER_NO   
		    , evalUser.USER_NAME 
		    , g.EVALU_GROUP_ID
		    , eg.EVALUATEE_GROUP_ID 

		FROM EVALU_FORM f
		JOIN EVALUATEE_GROUP eg ON eg.EVALU_FORM_NO = f.EVALU_FORM_NO
		JOIN EMPLOYEE u ON u.USER_NO = eg.USER_NO  
		JOIN TEAM t ON t.TEAM_NO = u.TEAM_NO
		JOIN DEPARTMENT d ON d.DEPARTMENT_ID = t.DEPARTMENT_ID
		JOIN EVALU_FORMAT fm ON fm.EVALU_FORM_NO = f.EVALU_FORM_NO
		JOIN EVALU_ITEM i ON i.EVALU_ITEM_NO = fm.EVALU_ITEM_NO
		JOIN EVALU_GROUP g ON g.EVALU_FORM_NO = f.EVALU_FORM_NO
		JOIN EMPLOYEE evalUser ON g.USER_NO = evalUser.USER_NO  
		WHERE f.EVALU_FORM_NO = #{evaluFormNo}
		  AND g.USER_NO = #{userNo}  
		ORDER BY u.USER_NO, fm.ORDER_NO
	</select>

	<!-- 내가 평가해야 할 리스트 (전체 조회)-->
	<select id="selectMyEvaluList" resultMap="formEmpMyList">
	SELECT DISTINCT 
		f.EVALU_NAME,
		f.EVALU_FORM_NO,
		f.EVALU_START,
		f.EVALU_END,
		t.TEAM_NAME,
		g.USAGE_STATUS, -- 내가 제출한 상태
		f.FORM_STATUS, -- 폼의 상태 
		f.EVALU_START,
		f.EVALU_END 
	FROM EVALU_GROUP g
	JOIN EVALU_FORM f ON g.EVALU_FORM_NO = f.EVALU_FORM_NO
	JOIN EMPLOYEE u ON g.USER_NO = u.USER_NO
	JOIN TEAM t ON t.TEAM_NO = u.TEAM_NO
	WHERE g.USER_NO = #{userNo}
	AND f.EVALU_FORM_NO IN ( SELECT EVALU_FORM_NO
					                FROM EVALU_GROUP
					                WHERE USER_NO = #{userNo} )
	ORDER BY f.EVALU_FORM_NO DESC
</select>
	
		<resultMap id="formEmpMyList" type="EvaluVO">
			  <id property="evaluFormNo" column="evalu_form_no" />
			  <result property="formStatus" column="form_status" />
			  <result property="evaluName" column="evalu_name" />
			  <result property="evaluStart" column="evalu_start" />
			  <result property="evaluEnd" column="evalu_end" />
              <result property="teamName" column="team_name" />
		</resultMap>
	<!-- 평가 폼 등록 시 필요한 항목과 내용 선택하기 위한 조회 쿼리문 -->
	<select id="selectContentList" resultType="EvaluVO">
			SELECT EVALU_ITEM_NO
		        ,  EVALU_COMPET
		        ,  EVALU_CONTENT
			FROM EVALU_ITEM   
	</select>
	<!-- 평가자 기반 평가자 직급, 이름, 팀명, 부서명, 폼 번호 쿼리문 -->
	<select id="selectEvaluInfoById" resultType="EvaluVO">
		SELECT
			d.DEPARTMENT_ID 
	        , u.USER_POSITION 
	        , u.USER_NAME  
	        , t.TEAM_NAME 
	        , d.DEPARTMENT_NAME 
	        , f.EVALU_FORM_NO
			, t.TEAM_NO
		FROM EMPLOYEE u 
		JOIN TEAM t ON u.TEAM_NO = t.TEAM_NO 
		JOIN DEPARTMENT d ON d.DEPARTMENT_ID = t.DEPARTMENT_ID 
		JOIN EVALU_GROUP g ON g.USER_NO = u.USER_NO  
		JOIN EVALU_FORM f ON g.EVALU_FORM_NO = f.EVALU_FORM_NO 
		WHERE f.EVALU_FORM_NO = #{evaluFormNo}
	</select>
	
	<!-- 피평가자 기반 평가자 직급, 이름, 팀명, 부서명, 폼 번호 쿼리문-->
	<select id="selectEvaluateeInfoById" resultType="EvaluVO">
		SELECT 
			d.DEPARTMENT_ID 
	        , u.USER_POSITION 
	        , f.EVALU_FORM_NO 
	        , u.USER_NAME
	        , t.TEAM_NAME 
	        , d.DEPARTMENT_NAME
	        , t.TEAM_NO
		FROM EMPLOYEE u 
		JOIN TEAM t ON u.TEAM_NO = t.TEAM_NO 
		JOIN DEPARTMENT d ON d.DEPARTMENT_ID = t.DEPARTMENT_ID 
		JOIN EVALUATEE_GROUP evg ON evg.USER_NO = u.USER_NO 
		JOIN EVALU_FORM f ON evg.EVALU_FORM_NO = f.EVALU_FORM_NO 
		WHERE f.EVALU_FORM_NO = #{evaluFormNo}
	</select>

	<!-- 부서명과 팀명 조회 쿼리문 -->
	<select id="selectTeamList" resultType="EmpVO">
		SELECT t.team_no
		        , t.team_name
		        , d.department_name
		        , t.department_id
		FROM team t 
		JOIN department d 
		ON t.department_id = d.department_id
	</select>
	
	<!-- 새 평가 등록 : form 부분 -->
	<insert id="insertEvaluForm" parameterType="EvaluVO">
		<selectKey keyProperty="evaluFormNo"
			   resultType="Integer"
			   order="BEFORE">
		 	SELECT EVALU_FORM_NO_SEQ.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO EVALU_FORM
					(EVALU_FORM_NO
		            , EVALU_NAME
		            , INSERT_DATE
		            , EVALU_START
		            , EVALU_END
		            , EVALU_DESCRIPT
		            , FORM_STATUS)
		VALUES 	(#{evaluFormNo}
		            , #{evaluName}
		            , SYSDATE
		            , #{evaluStart}
		            , #{evaluEnd}
		            , #{evaluDescript}
		            ,  (CASE WHEN TRUNC(#{evaluStart}) = TRUNC(SYSDATE) 
		                THEN '진행 중' 
		                ELSE '대기 중' 
		                END ))
	</insert>
	<!-- 새 평가 등록 : format 부분 -->
	<insert id="insertEvaluFormat" parameterType="EvaluVO">	
      	INSERT INTO EVALU_FORMAT
			(EVALU_NO
			, ORDER_NO
			, EVALU_ITEM_NO
			, EVALU_FORM_NO)
			
		VALUES ( EVALU_NO_SEQ.NEXTVAL
			, #{orderNo}
			, #{evaluItemNo}
			, #{evaluFormNo}
			)
	</insert>
	<!-- 새 평가 등록 : 평가자 그룹 아이디 => 조회는 사원 번호와 평가 폼 번호로 -->
	<insert id="insertEvaluGroup" parameterType="EvaluVO">
			INSERT INTO EVALU_GROUP
			(
			    EVALU_GROUP_ID
			    , EVALU_FORM_NO
			    , USER_NO    
			    , USAGE_STATUS            
			)
			SELECT 
			    EVALU_G_ID_SEQ.NEXTVAL
			    , #{evaluFormNo}
			    , u.user_no
			    , '미제출'
			FROM EMPLOYEE u 
			JOIN TEAM t ON u.team_no = t.team_no
			WHERE t.team_no = #{evaluGroupId}
	</insert>
	<!-- 새 평가 등록 : 피평가자 그룹 아이디 -->
	<insert id="insertEvaluateeGroup" parameterType="EvaluVO">
		INSERT INTO EVALUATEE_GROUP
		(
		    EVALUATEE_GROUP_ID
		    , EVALU_FORM_NO
		    , USER_NO                
		)
		SELECT 
		    EVALUATEE_G_ID_SEQ.NEXTVAL
		    , #{evaluFormNo}
		    , u.user_no
		FROM EMPLOYEE u 
		JOIN TEAM t ON u.team_no = t.team_no
		WHERE t.team_no = #{evaluateeGroupId}
	</insert>

	<!-- 평가 진행 : 평가 결과 테이블에 insert-->
	<insert id="insertEvaluScore" parameterType="EvaluVO">
		INSERT INTO EVALU_RESULT
	            ( EVALU_RESULT_ID
	             , EVALU_SCORE
	             , EVALU_DATE 
	             , EVALU_GROUP_ID 
	             , EVALUATEE_GROUP_ID
	             , EVALU_NO
	             , EVALU_FORM_NO
	             , ORDER_NO
	             , USER_NO 
                 , RESULT_STATUS )
		VALUES ( EVALU_RESULT_ID_SEQ.NEXTVAL 
		       , #{evaluScore}
		       , SYSDATE
		       , #{evaluGroupId}
		       , #{evaluateeGroupId}
		       , #{evaluNo}
		       , #{evaluFormNo}
		       , #{orderNo}
		       , #{userNo} 
               , #{resultStatus})
	</insert>
	
	<!-- 평가 제출 후 개인 평가 상태 '제출 완료' 로 수정하는 쿼리문 -->
	<update id="updateEvaluStatus" parameterType="EvaluVO">
		UPDATE EVALU_GROUP 
		SET USAGE_STATUS = #{usageStatus}
		WHERE EVALU_FORM_NO = #{evaluFormNo}
		  AND USER_NO = #{userNo}
	</update>
	<!-- EVALU_GROUP에서 개인 평가 상태 조회 -->
	<select id="selectMyEvaluStatus" resultType="String" parameterType="EvaluVO">
	    SELECT USAGE_STATUS
	    FROM EVALU_GROUP
	    WHERE EVALU_FORM_NO = #{evaluFormNo}
	      AND USER_NO = #{userNo}
	</select>
	<!-- 평가 상태 조회 쿼리 -->
	<select id="selectEvaluStatus" resultType="String" parameterType="int">
	    SELECT FORM_STATUS
	    FROM EVALU_FORM
	    WHERE EVALU_FORM_NO = #{formNo}
	</select>
	
	<!-- 피평가자 : loginUser인 평가(평균) -->
	<select id="selectMyReceivedAvgScore" resultType="EvaluVO">
			SELECT
			    i.EVALU_COMPET,
			    i.EVALU_CONTENT,
			    AVG(r.EVALU_SCORE) AS evaluScore,
			    fm.ORDER_NO
			FROM EVALU_RESULT r
			JOIN EVALUATEE_GROUP g
			    ON r.EVALUATEE_GROUP_ID = g.EVALUATEE_GROUP_ID
			JOIN EVALU_FORMAT fm
			    ON r.EVALU_NO = fm.EVALU_NO
			JOIN EVALU_ITEM i
			    ON fm.EVALU_ITEM_NO = i.EVALU_ITEM_NO
			WHERE g.USER_NO = #{userNo}               
			  AND r.EVALU_FORM_NO = #{evaluFormNo}    
			GROUP BY i.EVALU_COMPET, i.EVALU_CONTENT, fm.ORDER_NO
			ORDER BY fm.ORDER_NO
</select>
<!-- 내가 피평가자로 등록된 평가 리스트 -->
	<select id="selectMyEvaluResultList" resultMap="myEvaluResultList">
		SELECT 
		    f.EVALU_NAME,
		    f.EVALU_FORM_NO,
		    f.EVALU_START,
		    f.EVALU_END,
		    t.TEAM_NAME,
		    f.FORM_STATUS
		FROM EVALUATEE_GROUP eg
		JOIN EVALU_FORM f ON eg.EVALU_FORM_NO = f.EVALU_FORM_NO
		JOIN EMPLOYEE u ON eg.USER_NO = u.USER_NO
		JOIN TEAM t ON t.TEAM_NO = u.TEAM_NO
		WHERE eg.USER_NO = #{userNo}
		  AND f.FORM_STATUS = '평가 완료'
		ORDER BY f.EVALU_FORM_NO DESC
	</select>
	
		<resultMap id="myEvaluResultList" type="EvaluVO">
		<id property="evaluFormNo" column="evalu_form_no" />
		  <result property="formStatus" column="form_status" />
			<result property="evaluName" column="evalu_name" />
				<result property="evaluStart" column="evalu_start" />
				<result property="evaluEnd" column="evalu_end" />
				<collection property="teamList" ofType="teamVO">
					<result property="teamName" column="team_name" />
				</collection>
	</resultMap>
	
	<!-- 내가 평가 받은 평가 단건 조회 -->
	<select id="selectMyEvaluScoreResultById" resultType="EvaluVO">
		SELECT 
		    u.USER_NO,
		    u.USER_NAME,
		    i.EVALU_COMPET,
		    i.EVALU_CONTENT,
		    f.EVALU_DESCRIPT,
		    d.DEPARTMENT_NAME,
		    t.TEAM_NAME,
		    f.EVALU_NAME,
		    ROUND(AVG(r.EVALU_SCORE), 1) AS avgScore,  -- 내 평균 점수
		    (
		        SELECT ROUND(AVG(r2.EVALU_SCORE), 1) 
		        FROM EVALU_RESULT r2
		        JOIN EVALUATEE_GROUP g2 ON r2.EVALUATEE_GROUP_ID = g2.EVALUATEE_GROUP_ID
		        WHERE g2.EVALU_FORM_NO = #{evaluFormNo} 
		          AND r2.EVALU_NO = r.EVALU_NO
		    ) AS otherAvgScore,  -- 다른 사람들의 평균 점수 (항목별)
		    fm.ORDER_NO
		FROM EVALU_FORM f
		JOIN EVALUATEE_GROUP g ON f.EVALU_FORM_NO = g.EVALU_FORM_NO
		JOIN EMPLOYEE u ON g.USER_NO = u.USER_NO
		JOIN EVALU_FORMAT fm ON fm.EVALU_FORM_NO = f.EVALU_FORM_NO
		JOIN EVALU_ITEM i ON i.EVALU_ITEM_NO = fm.EVALU_ITEM_NO
		JOIN EVALU_RESULT r ON r.EVALU_NO = fm.EVALU_NO 
		                     AND r.EVALUATEE_GROUP_ID = g.EVALUATEE_GROUP_ID
		JOIN TEAM t ON t.team_no = u.team_no
		JOIN DEPARTMENT d ON d.department_id = t.department_id
		WHERE f.EVALU_FORM_NO = #{evaluFormNo}
		  AND u.USER_NO = #{userNo}
		GROUP BY 
		    u.USER_NO,
		    u.USER_NAME,
		    i.EVALU_COMPET,
		    i.EVALU_CONTENT,
		    fm.ORDER_NO,
		    d.DEPARTMENT_NAME,
		    f.EVALU_NAME,
		    t.TEAM_NAME,
		    r.EVALU_NO,
		    f.EVALU_DESCRIPT
		ORDER BY fm.ORDER_NO
		
	</select>

	
	<!-- 부서 전체 -->
	<select id="selectDepartmentList" resultType="DepartmentVO">
		SELECT d.DEPARTMENT_ID 
	        , u.USER_NAME
	        , d.DEPARTMENT_NAME
	        , t.TEAM_NAME
		FROM DEPARTMENT d 
		JOIN TEAM t
		ON d.DEPARTMENT_ID = t.department_id
		JOIN EMPLOYEE u
		ON u.USER_NO = d.department_head
		ORDER BY DEPARTMENT_ID 
	</select>
	<!-- 부서 단건 조회 -->
	<select id="selectDepartmentById" resultType="DepartmentVO">
		SELECT 
	        d.DEPARTMENT_ID
	        , d.DEPARTMENT_NAME
	        , u.USER_NAME
	        , u.USER_MAIL
	        , u.USER_PHONE
	        , d.DEPT_WORK
	        , d.DEPT_LOCATION
	        , d.BUDGET
	        , t.TEAM_NAME
        FROM DEPARTMENT d 
		JOIN TEAM t
		ON d.DEPARTMENT_ID = t.department_id
		JOIN EMPLOYEE u
		ON u.USER_NO = d.department_head
		WHERE d.DEPARTMENT_ID = #{departmentId}
		ORDER BY d.DEPARTMENT_ID
	</select>
	<!-- 부서 등록 -->
	<insert id="insertNewDepartment" parameterType="DepartmentVO">
	  <selectKey keyProperty="departmentId" resultType="String" order="BEFORE">
	    SELECT 'D' || LPAD(DEPT_SEQ.NEXTVAL, 3, '0') FROM DUAL
	  </selectKey>
	
	  INSERT INTO DEPARTMENT (
	    DEPARTMENT_ID,
	    DEPARTMENT_NAME,
	    DEPARTMENT_HEAD,
	    DEPT_WORK,
	    DEPT_LOCATION,
	    BUDGET
	  )
	  VALUES (
	    #{departmentId},
	    #{departmentName},
	    #{departmentHead},
	    #{deptWork},
	    #{deptLocation},
	    #{budget}
	  )
	</insert>
	<!-- 팀 등록 -->
	<insert id="insertNewTeam" parameterType="TeamVO">
  <selectKey keyProperty="teamNo" resultType="String" order="BEFORE">
    SELECT 'T' || LPAD(TEAM_SEQ.NEXTVAL, 3, '0') FROM DUAL
  </selectKey>
	
	  INSERT INTO TEAM (
	    TEAM_NO,
	    TEAM_NAME,
	    DEPARTMENT_ID
	  ) VALUES (
	    #{teamNo},
	    #{teamName},
	    #{departmentId}
	  )
</insert>
<!-- 시작일자가 되면 자동으로 진행 중으로 변경 -->
<update id="updateStatusToInProgress" parameterType="java.time.LocalDate">
    UPDATE EVALU_FORM
    SET status = '진행 중'
    WHERE status = '대기 중'
      AND TO_CHAR(evalu_start, 'YYYY-MM-DD') = #{today}
</update>

<!-- 평가 종료일이 지난 폼 : 평가 완료로 -->
<update id="updateStatusByEvaluEndDate">
    UPDATE EVALU_FORM
    SET FORM_STATUS = '평가 완료'
    WHERE EVALU_END <![CDATA[<]]> SYSDATE
      AND FORM_STATUS != '평가 완료'
</update>
<!-- 임시 저장 -->
<!-- 1. 임시 저장된 결과 UPDATE -->
<update id="updateEvaluScore" parameterType="EvaluVO">
    UPDATE EVALU_RESULT
    SET 
        EVALU_SCORE = #{evaluScore},
        EVALU_DATE = SYSDATE,
        RESULT_STATUS = #{resultStatus}
    WHERE 
        EVALU_FORM_NO = #{evaluFormNo}
        AND EVALU_ITEM_NO = #{evaluItemNo}
        AND USER_NO = #{userNo}                          -- 평가자
        AND EVALUATEE_GROUP_ID = #{evaluateeGroupId}     -- 피평가자 그룹 ID
        AND RESULT_STATUS = '임시 저장'
</update>

<!-- 2. 임시 저장된 점수 불러오기 -->
<select id="selectTempEvaluScore" resultMap="tempScoreMap" parameterType="EvaluVO">
      SELECT 
        r.EVALU_FORM_NO,
        r.USER_NO AS evaluatorUserNo,           -- 평가자
        eeg.USER_NO AS evaluateeUserNo,         -- 피평가자 
        r.EVALU_SCORE,
        r.EVALU_NO,
        r.ORDER_NO,
        i.EVALU_COMPET,
        i.EVALU_CONTENT,
        fm.EVALU_ITEM_NO
    FROM EVALU_RESULT r
    JOIN EVALU_FORMAT fm ON r.EVALU_NO = fm.EVALU_NO
    JOIN EVALU_ITEM i ON fm.EVALU_ITEM_NO = i.EVALU_ITEM_NO
    JOIN EVALUATEE_GROUP eeg ON r.EVALUATEE_GROUP_ID = eeg.EVALUATEE_GROUP_ID  
    WHERE r.EVALU_FORM_NO = #{evaluFormNo}
      AND r.USER_NO = #{userNo}     -- 로그인한 평가자
      AND r.RESULT_STATUS = '임시 저장'
</select>

<resultMap id="tempScoreMap" type="EvaluVO">
    <result property="evaluFormNo" column="EVALU_FORM_NO"/>
    <result property="evaluatorUserNo" column="evaluatorUserNo"/>
    <result property="evaluateeUserNo" column="evaluateeUserNo"/>
    <result property="evaluScore" column="EVALU_SCORE"/>
    <result property="evaluNo" column="EVALU_NO"/>
    <result property="orderNo" column="ORDER_NO"/>
    <result property="evaluCompet" column="EVALU_COMPET"/>
    <result property="evaluContent" column="EVALU_CONTENT"/>
    <result property="evaluItemNo" column="EVALU_ITEM_NO"/>
</resultMap>
<!-- 3. EVALU_GROUP 상태를 '임시저장'으로 변경 -->
<update id="updateEvaluGroupStatus" parameterType="EvaluVO">
    UPDATE EVALU_GROUP
    SET USAGE_STATUS = #{usageStatus}
    WHERE 
        EVALU_FORM_NO = #{evaluFormNo}
        AND USER_NO = #{userNo}
</update>
<!-- 임시저장된 거 삭제 -->
<delete id="deleteTempEvaluScore" parameterType="EvaluVO">
  DELETE FROM EVALU_RESULT
    WHERE 
        EVALU_FORM_NO = #{evaluFormNo}
        AND USER_NO = #{userNo}                          -- 평가자
        AND EVALUATEE_GROUP_ID = #{evaluateeGroupId}     -- 피평가자
        AND RESULT_STATUS = '임시 저장'
</delete>
</mapper>