<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.workmate.app.employee.mapper.EmpMapper">
	<!-- 사원 전체 조회 (조직도/사원이름/부서명) -->
	<!-- <select id="selectAllName" resultType="EmpVO">
 		SELECT u.user_name
 				, u.user_no
		        , d.department_name
		FROM employee u 
		JOIN  team t 
		ON u.team_no = t.team_no
		JOIN department d 
		ON d.department_id = t.department_id 
	</select> -->
	<!--/* 조직도의 사원 상세 조회 */-->
	<select id="selectEmpById" resultType="EmpVO">
		SELECT u.user_name
		        , d.department_name
		        , t.team_name
                , u.team_no
		        , u.user_position
		        , u.user_no
		        , u.user_id
		        , u.hire_date
		        , u.resign_date
		        , u.user_phone
		        , u.address
		        , u.user_ip
		        , u.common_ip
		FROM employee u 
		LEFT JOIN team t 
		ON u.team_no = t.team_no
        LEFT JOIN department d 
		ON t.department_id = d.department_id
		WHERE u.user_no = #{userNo}
		AND u.user_no between 100 AND 300
	</select>
	

	<!-- 직급 조회 -->
	<select id="selectEmpPositionList" resultType="EmpVO">
		SELECT code_name
			, code
		FROM common_code
		WHERE group_code = '0Q' 
		AND code IS NOT NULL
        AND code LIKE '%q%'
	</select>
	
	<!-- 사원 등록 --> 
	<insert id="insertEmployee" parameterType="EmpVO">
		<selectKey keyProperty="userNo"
				   resultType="Integer"
				   order="BEFORE">
		 SELECT MAX(USER_NO) + 1
         FROM EMPLOYEE
         WHERE USER_NO BETWEEN 200 AND 700
		</selectKey>
		INSERT INTO employee 
					(
    					 USER_NO
                       , USER_NAME
    				   , TEAM_NO
    				   , USER_POSITION
    				   , USER_ID
    				   , USER_PWD
    				   , USER_PHONE
    				   , ADDRESS
    				   , USER_MAIL
    				   , HIRE_DATE
					) 
		VALUES 		
					(
						#{userNo}
                      , #{userName}
					  , #{teamNo}
					  , ( SELECT CODE_NAME
					  	  FROM COMMON_CODE
					  	  WHERE CODE = #{userPosition} )
					  , 'user' || #{userNo}
					  , DBMS_RANDOM.STRING('X', 10) 
					  , #{userPhone}
					  , #{address}
					  , 'user' || #{userNo} || '@example.com'
					  , SYSDATE
					)
	</insert>
	
	<!-- 평가 조회 -->
	<select id="selectEvaluList" resultType="EvaluVO">
		SELECT i.EVALU_SUMMARY
		      , ef.EVALU_NO
		      , i.EVALU_COMPET
		      , i.EVALU_CONTENT
		      , f.EVALU_NAME
		 FROM EVALU_ITEM i 
		 JOIN EVALU_FORMAT ef
		   ON i.EVALU_ITEM_NO = ef.EVALU_ITEM_NO
		 JOIN EVALU_FORM f 
		   ON f.EVALU_FORM_NO = ef.EVALU_FORM_NO
		WHERE f.EVALU_FORM_NO = 1
	</select>
	
<!-- 사원 수정 -->
	<update id="updateEmployee" parameterType="EmpVO">
		UPDATE employee 
		SET
              USER_NAME = #{userName}
            , TEAM_NO =  #{teamNo}
            , HIRE_DATE = #{hireDate}
    		, USER_POSITION = #{userPosition}
    		, USER_PHONE = #{userPhone}
    		, ADDRESS = #{address}

        WHERE user_no = #{userNo}
	</update>
	
    <!-- 부서 및 팀별 사원 조회 -->
	<select id="selectEmpNameList" resultMap="departTeamMap">
		SELECT 
		          d.department_id
		        , d.department_name
		        , t.team_no
		        , t.team_name
		        , e.user_name
		        , e.user_id
		        , e.user_no
		FROM team t
		LEFT JOIN department d
		ON t.department_id = d.department_id
		LEFT JOIN employee e 
		ON e.team_no = t.team_no
		ORDER BY e.user_no
	</select>
	
		<!-- collection -->
	<resultMap id="departTeamMap" type="DepartmentVO">	
		<id property="departmentId" column="department_id" />
		<result property="departmentName" column="department_name" />
			<collection property="teamList" ofType="TeamVO">
				<result property="teamNo" column="team_no" />
				<result property="teamName" column="team_name" />
					<collection property="empList" ofType="EmpVO">
						<result property="userName" column="user_name" />
						<result property="userNo" column="user_no" />
					</collection>
			</collection>
	</resultMap> 
	
	<!-- 지난 평가 리스트 조회 (전체 출력) -->
	<select id="selectBeforeEvaluList" resultType="EvaluVO">
		SELECT EVALU_NAME
        , USAGE_STATUS 
        , EVALU_START
        , EVALU_END
        , EVALU_FORM_NO
		FROM EVALU_FORM
	</select>
	<!-- 평가 단건 조회 (일반 사용자, 본인 로그인한 userNo, formNo기반) -->
	<select id="selectMyEvaluResultById" resultType="EvaluVO">

			SELECT f.EVALU_NAME              
			        , f.EVALU_START          
			        , g.EVALUATEE_GROUP_ID      
			        , u.USER_NO
			        , u.USER_NAME          
			        , i.EVALU_COMPET       
			        , i.EVALU_CONTENT
			        , r.EVALU_SCORE        
			        , fm.ORDER_NO
			FROM EVALU_FORM f              
			JOIN EVALUATEE_GROUP g
			ON f.EVALU_FORM_NO = g.EVALU_FORM_NO
			JOIN EMPLOYEE u
			ON g.USER_NO = u.USER_NO        
			JOIN EVALU_FORMAT fm
			ON fm.EVALU_FORM_NO = f.EVALU_FORM_NO  
			JOIN EVALU_RESULT r
			ON r.EVALU_GROUP_ID = g.EVALUATEE_GROUP_ID AND fm.EVALU_NO = r.EVALU_NO 
			JOIN EVALU_ITEM i
			ON i.EVALU_ITEM_NO = fm.EVALU_ITEM_NO 
			WHERE f.EVALU_FORM_NO = 1
		
	</select>
	
	<!-- 평가 단순 조회 (관리자, formNo 기반) -->
		<select id="selectAdminBeforeEvaluList" resultType="EvaluVO">
			SELECT    
			    	  f.EVALU_FORM_NO
					, f.EVALU_NAME              
			        , f.EVALU_START          
			        , g.EVALUATEE_GROUP_ID      
			        , u.USER_NO
			        , u.USER_NAME          
			        , i.EVALU_COMPET       
			        , i.EVALU_CONTENT
			        , r.EVALU_SCORE        
			        , fm.ORDER_NO
			        , f.EVALU_FORM_NO
                    , d.department_name
                    , t.team_name
			FROM EVALU_FORM f              
			JOIN EVALUATEE_GROUP g
			ON f.EVALU_FORM_NO = g.EVALU_FORM_NO
			JOIN EMPLOYEE u
			ON g.USER_NO = u.USER_NO        
			JOIN EVALU_FORMAT fm
			ON fm.EVALU_FORM_NO = f.EVALU_FORM_NO  
			JOIN EVALU_RESULT r
			ON r.EVALU_GROUP_ID = g.EVALUATEE_GROUP_ID AND fm.EVALU_NO = r.EVALU_NO 
			JOIN EVALU_ITEM i
			ON i.EVALU_ITEM_NO = fm.EVALU_ITEM_NO 
            JOIN TEAM t
            ON t.TEAM_NO = u.TEAM_NO
            JOIN DEPARTMENT d
            ON t.department_id = d.department_id
			WHERE f.EVALU_FORM_NO = #{evaluFormNo}
	</select> 
	<!-- 평가 폼 등록 시 필요한 항목과 내용 선택하기 위한 조회 쿼리문 -->
	<select id="selectContentList" resultType="EvaluVO">
			SELECT EVALU_ITEM_NO
		        ,  EVALU_COMPET
		        ,  EVALU_CONTENT
			FROM EVALU_ITEM   
	</select>
	<!-- 평가자 기반 평가자 직급, 이름, 팀명, 부서명, 폼 번호 쿼리문 -->
	<select id="selectEvaluInfoById" resultType="EvaluVO">
		SELECT
			d.DEPARTMENT_ID 
	        , u.USER_POSITION 
	        , u.USER_NAME  
	        , t.TEAM_NAME 
	        , d.DEPARTMENT_NAME 
	        , f.EVALU_FORM_NO
			, t.TEAM_NO
		FROM EMPLOYEE u 
		JOIN TEAM t ON u.TEAM_NO = t.TEAM_NO 
		JOIN DEPARTMENT d ON d.DEPARTMENT_ID = t.DEPARTMENT_ID 
		JOIN EVALU_GROUP g ON g.USER_NO = u.USER_NO  
		JOIN EVALU_FORM f ON g.EVALU_FORM_NO = f.EVALU_FORM_NO 
		WHERE f.EVALU_FORM_NO = #{evaluFormNo}
	</select>
	
	<!-- 피평가자 기반 평가자 직급, 이름, 팀명, 부서명, 폼 번호 쿼리문-->
	<select id="selectEvaluateeInfoById" resultType="EvaluVO">
		SELECT 
			d.DEPARTMENT_ID 
	        , u.USER_POSITION 
	        , f.EVALU_FORM_NO 
	        , u.USER_NAME
	        , t.TEAM_NAME 
	        , d.DEPARTMENT_NAME
	        , t.TEAM_NO
		FROM EMPLOYEE u 
		JOIN TEAM t ON u.TEAM_NO = t.TEAM_NO 
		JOIN DEPARTMENT d ON d.DEPARTMENT_ID = t.DEPARTMENT_ID 
		JOIN EVALUATEE_GROUP evg ON evg.USER_NO = u.USER_NO 
		JOIN EVALU_FORM f ON evg.EVALU_FORM_NO = f.EVALU_FORM_NO 
		WHERE f.EVALU_FORM_NO = #{evaluFormNo}
	</select>

	<!-- 부서명과 팀명 조회 쿼리문 -->
	<select id="selectTeamList" resultType="EmpVO">
				SELECT t.team_no
				        , t.team_name
				        , d.department_name
				        , t.department_id
				FROM team t 
				JOIN department d 
				ON t.department_id = d.department_id
	</select>
	
	<!-- 새 평가 등록 (form 부분) -->
	<insert id="insertEvaluForm" parameterType="EvaluVO">
		INSERT INTO EVALU_FORM
					(EVALU_FORM_NO
		            , EVALU_NAME
		            , INSERT_DATE
		            , EVALU_START
		            , EVALU_END)
		VALUES 	(EVALU_FORM_NO_SEQ.NEXTVAL
		            , #{evaluName}
		            , #{insertDate}
		            , #{evaluStart}
		            , #{evaluEnd})
	</insert>
	<!-- 새 평가 등록 (format 부분) -->
	<insert id="insertEvaluFormat" parameterType="EvaluVO">	
		INSERT INTO EVALU_FORMAT
					(EVALU_NO
					, ORDER_NO
					, EVALU_ITEM_NO
					, EVALU_FROM_NO)
		VALUES 		( EVALU_NO_SEQ.NEXTVAL
					, #{ORDER_NO}
					, #{EVALU_ITEM_NO}
					, #{EVALU_FORM_NO}
					)
	</insert>
</mapper>