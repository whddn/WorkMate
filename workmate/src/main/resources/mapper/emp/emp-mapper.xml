<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.workmate.app.employee.mapper.EmpMapper">
	<!-- 사원 전체 조회 (조직도/사원이름/부서명) -->
	<!-- <select id="selectAllName" resultType="EmpVO">
 		SELECT u.user_name
 				, u.user_no
		        , d.department_name
		FROM employee u 
		JOIN  team t 
		ON u.team_no = t.team_no
		JOIN department d 
		ON d.department_id = t.department_id 
	</select> -->
	<!--/* 조직도의 사원 상세 조회 */-->
	<select id="selectEmpById" resultType="EmpVO">
		SELECT u.user_name
		        , d.department_name
		        , d.department_id
		        , t.team_name
                , u.team_no
		        , u.user_position
		        , u.user_no
		        , u.user_id
		        , u.hire_date
		        , u.resign_date
		        , u.user_phone
		        , u.address
		        , u.user_ip
		        , u.common_ip
		FROM employee u 
		LEFT JOIN team t 
		ON u.team_no = t.team_no
        LEFT JOIN department d 
		ON t.department_id = d.department_id
		WHERE u.user_no = #{userNo}
	</select>
	

	<!-- 직급 조회 -->
	<select id="selectEmpPositionList" resultType="EmpVO">
		SELECT code_name
			, code
		FROM common_code
		WHERE group_code = '0Q' 
		AND code IS NOT NULL
        AND code LIKE '%q%'
	</select>
	
	<!-- 사원 등록 --> 
	<insert id="insertEmployee" parameterType="EmpVO">
		<selectKey keyProperty="userNo"
				   resultType="Integer"
				   order="BEFORE">
		 SELECT MAX(USER_NO) + 1
         FROM EMPLOYEE
         WHERE USER_NO BETWEEN 200 AND 700
		</selectKey>
		INSERT INTO employee 
					(
    					 USER_NO
                       , USER_NAME
    				   , TEAM_NO
    				   , USER_POSITION
    				   , USER_ID
    				   , USER_PWD
    				   , USER_PHONE
    				   , ADDRESS
    				   , USER_MAIL
    				   , HIRE_DATE
    				   , STATUS_USER
					) 
		VALUES 		
					(
						#{userNo}
                      , #{userName}
					  , #{teamNo}
					  , ( SELECT CODE_NAME
					  	  FROM COMMON_CODE
					  	  WHERE CODE = #{userPosition} )
					  , 'user' || #{userNo}
					  , #{userPwd}
					  , #{userPhone}
					  , #{address}
					  , 'user' || #{userNo} || '@example.com'
					  , SYSDATE
					  , '재직'
					)
	</insert>
	<!-- 사원 수정 -->
	<update id="updateEmployee" parameterType="EmpVO">
		UPDATE employee 
		SET
              USER_NAME = #{userName}
            , TEAM_NO =  #{teamNo}
            , HIRE_DATE = #{hireDate}
    		, USER_POSITION = #{userPosition}
    		, USER_PHONE = #{userPhone}
    		, ADDRESS = #{address}

        WHERE user_no = #{userNo}
	</update>
	
    <!-- 부서 및 팀별 사원 조회 -->
	<select id="selectEmpNameList" resultMap="departTeamMap">
		SELECT 
		          d.department_id
		        , d.department_name
		        , t.team_no
		        , t.team_name
		        , e.user_name
		        , e.user_id
		        , e.user_no
		FROM team t
		LEFT JOIN department d
		ON t.department_id = d.department_id
		LEFT JOIN employee e 
		ON e.team_no = t.team_no
		ORDER BY e.user_no
	</select>
	
		<!-- collection -->
	<resultMap id="departTeamMap" type="DepartmentVO">	
		<id property="departmentId" column="department_id" />
		<result property="departmentName" column="department_name" />
			<collection property="teamList" ofType="TeamVO">
				<result property="teamNo" column="team_no" />
				<result property="teamName" column="team_name" />
					<collection property="empList" ofType="EmpVO">
						<result property="userName" column="user_name" />
						<result property="userNo" column="user_no" />
					</collection>
			</collection>
	</resultMap> 
	<!-- 평가해야 하는 페이지 단건 조회 -->
	<select id="selectEvaluList" resultType="EvaluVO">
		SELECT i.EVALU_SUMMARY
		      , ef.EVALU_NO
		      , i.EVALU_COMPET
		      , i.EVALU_CONTENT
		      , f.EVALU_NAME
		 FROM EVALU_ITEM i 
		 JOIN EVALU_FORMAT ef
		   ON i.EVALU_ITEM_NO = ef.EVALU_ITEM_NO
		 JOIN EVALU_FORM f 
		   ON f.EVALU_FORM_NO = ef.EVALU_FORM_NO
		WHERE f.EVALU_FORM_NO = 1
	</select>
	<!-- 진행할 평가 단건 (왜 있는 건지 모르겠음) -->
	<!-- <select id="selectOneEvaluById" resultType="EvaluVO">
				SELECT g.EVALU_GROUP_ID
			        , ga.EVALUATEE_GROUP_ID
			        , f.EVALU_FORM_NO
				FROM EVALU_GROUP g
				JOIN EVALU_FORM f
				ON f.EVALU_FORM_NO = g.EVALU_FORM_NO
				JOIN EVALUATEE_GROUP ga
				ON f.EVALU_FORM_NO = ga.EVALU_FORM_NO
				WHERE f.EVALU_FORM_NO = #{evaluFormNo}
	</select> -->


	<!-- 지난 평가 리스트 조회 (전체 출력 / 관리자) -->
	<select id="selectBeforeEvaluList" resultType="EvaluVO">
		SELECT f.EVALU_NAME
            , f.USAGE_STATUS 
            , f.EVALU_START
            , f.EVALU_END
            , f.EVALU_FORM_NO
            , t.team_name
            , t.team_no
		FROM EVALU_FORM f
        JOIN EVALUATEE_GROUP eg
        ON eg.EVALU_FORM_NO = f.EVALU_FORM_NO 
        JOIN EMPLOYEE u
        ON u.USER_NO = eg.USER_NO
        JOIN TEAM t
        ON t.TEAM_NO = u.TEAM_NO
		ORDER BY EVALU_FORM_NO DESC
	</select>
	<!--  내가 평가자로서 진행한 평가 항목 + 점수 단건 조회 (formNo, userNo 기준)-->
	<select id="selectMyEvaluingById" resultType="EvaluVO">
		SELECT 
		    g.USER_NO  ,  
		    u.USER_NAME ,     
		    i.EVALU_COMPET,                   
		    i.EVALU_CONTENT,                
		    r.EVALU_SCORE AS evaluScore,                 
		    fm.ORDER_NO                      
		FROM EVALU_RESULT r
		JOIN EVALUATEE_GROUP g 
		    ON r.EVALUATEE_GROUP_ID = g.EVALUATEE_GROUP_ID
		JOIN EMPLOYEE u 
		    ON g.USER_NO = u.USER_NO
		JOIN EVALU_FORMAT fm 
		    ON r.EVALU_NO = fm.EVALU_NO
		JOIN EVALU_ITEM i 
		    ON fm.EVALU_ITEM_NO = i.EVALU_ITEM_NO
		WHERE r.EVALU_FORM_NO = #{evaluFormNo}           
		ORDER BY u.USER_NO, fm.ORDER_NO
	</select>
	<!-- 평가 결과 단순 조회 (관리자, formNo, userNo 기반) -->
		<select id="selectAdminBeforeEvaluById" resultType="EvaluVO">
					SELECT    
			      f.EVALU_FORM_NO,
			      f.EVALU_NAME,              
			      f.EVALU_START,               
			      u.USER_NO,
			      u.USER_NAME,          
			      i.EVALU_COMPET,       
			      i.EVALU_CONTENT,
			      fm.ORDER_NO,
			      d.DEPARTMENT_NAME,
			      t.TEAM_NAME,
			      fm.EVALU_NO,
			      r.EVALU_SCORE,  
				      (
				        SELECT ROUND(AVG(r2.EVALU_SCORE), 1)
				        FROM EVALU_RESULT r2
				        JOIN EVALU_FORMAT fm2 ON r2.EVALU_NO = fm2.EVALU_NO
				        WHERE fm2.EVALU_ITEM_NO = i.EVALU_ITEM_NO
				          AND r2.EVALU_FORM_NO = f.EVALU_FORM_NO
				      ) AS avgScore
				FROM EVALU_FORM f              
				JOIN EVALUATEE_GROUP g ON f.EVALU_FORM_NO = g.EVALU_FORM_NO
				JOIN EMPLOYEE u ON g.USER_NO = u.USER_NO        
				JOIN EVALU_FORMAT fm ON fm.EVALU_FORM_NO = f.EVALU_FORM_NO  
				JOIN EVALU_ITEM i ON i.EVALU_ITEM_NO = fm.EVALU_ITEM_NO 
				JOIN TEAM t ON t.TEAM_NO = u.TEAM_NO
				JOIN DEPARTMENT d ON t.DEPARTMENT_ID = d.DEPARTMENT_ID
				JOIN EVALU_RESULT r ON r.EVALU_NO = fm.EVALU_NO
				                    AND r.EVALU_FORM_NO = f.EVALU_FORM_NO
                                    AND r.EVALUATEE_GROUP_ID = g.EVALUATEE_GROUP_ID
				
				WHERE f.EVALU_FORM_NO = #{evaluFormNo}
				ORDER BY u.USER_NO
			
	</select>
	
	<!-- 관리자 단건 조회 - 개인에 대한 결과 쿼리문 -->
	<select id="selectAdminBeforeUserEvaluById" resultType="EvaluVO">
					SELECT    
			      f.EVALU_FORM_NO,
			      f.EVALU_NAME,              
			      f.EVALU_START,               
			      u.USER_NO,
			      u.USER_NAME,          
			      i.EVALU_COMPET,       
			      i.EVALU_CONTENT,
			      fm.ORDER_NO,
			      d.DEPARTMENT_NAME,
			      t.TEAM_NAME,
			      fm.EVALU_NO,
			      r.EVALU_SCORE,  
				      (
				        SELECT AVG(r2.EVALU_SCORE)
				        FROM EVALU_RESULT r2
				        JOIN EVALU_FORMAT fm2 ON r2.EVALU_NO = fm2.EVALU_NO
				        WHERE fm2.EVALU_ITEM_NO = i.EVALU_ITEM_NO
				          AND r2.EVALU_FORM_NO = f.EVALU_FORM_NO
				      ) AS avgScore
				FROM EVALU_FORM f              
				JOIN EVALUATEE_GROUP g ON f.EVALU_FORM_NO = g.EVALU_FORM_NO
				JOIN EMPLOYEE u ON g.USER_NO = u.USER_NO        
				JOIN EVALU_FORMAT fm ON fm.EVALU_FORM_NO = f.EVALU_FORM_NO  
				JOIN EVALU_ITEM i ON i.EVALU_ITEM_NO = fm.EVALU_ITEM_NO 
				JOIN TEAM t ON t.TEAM_NO = u.TEAM_NO
				JOIN DEPARTMENT d ON t.DEPARTMENT_ID = d.DEPARTMENT_ID
				JOIN EVALU_RESULT r ON r.EVALU_NO = fm.EVALU_NO
				                    AND r.EVALU_FORM_NO = f.EVALU_FORM_NO
                                    AND r.EVALUATEE_GROUP_ID = g.EVALUATEE_GROUP_ID
				
				WHERE f.EVALU_FORM_NO = #{evaluFormNo}
				AND u.USER_NO = #{userNo}
				ORDER BY u.USER_NO
	</select>
	
	<!-- 진행할 평가 조회 1건 / 내가 평가자 그룹으로 등록되어 있는 폼에 대한 피평가자 정보와 등록된 평가폼 조회 -->
	<select id="selectOneEvaluById" resultType="EvaluVO">
		SELECT
		    f.EVALU_FORM_NO
		    , f.EVALU_NAME
		    , f.USAGE_STATUS
		    , fm.ORDER_NO
		    , fm.EVALU_NO
		    , i.EVALU_ITEM_NO
		    , i.EVALU_COMPET
		    , i.EVALU_CONTENT
		    , u.USER_NO          
		    , u.USER_NAME
		    , t.TEAM_NAME
		    , d.DEPARTMENT_NAME
		    , evalUser.USER_NO   
		    , evalUser.USER_NAME 
		    , g.EVALU_GROUP_ID
		    , eg.EVALUATEE_GROUP_ID 

		FROM EVALU_FORM f
		JOIN EVALUATEE_GROUP eg ON eg.EVALU_FORM_NO = f.EVALU_FORM_NO
		JOIN EMPLOYEE u ON u.USER_NO = eg.USER_NO  
		JOIN TEAM t ON t.TEAM_NO = u.TEAM_NO
		JOIN DEPARTMENT d ON d.DEPARTMENT_ID = t.DEPARTMENT_ID
		JOIN EVALU_FORMAT fm ON fm.EVALU_FORM_NO = f.EVALU_FORM_NO
		JOIN EVALU_ITEM i ON i.EVALU_ITEM_NO = fm.EVALU_ITEM_NO
		JOIN EVALU_GROUP g ON g.EVALU_FORM_NO = f.EVALU_FORM_NO
		JOIN EMPLOYEE evalUser ON g.USER_NO = evalUser.USER_NO  
		WHERE f.EVALU_FORM_NO = #{evaluFormNo}
		  AND g.USER_NO = #{userNo}  
		ORDER BY u.USER_NO, fm.ORDER_NO
	</select>

		<!-- 내가 평가한 평가 리스트 (전체 조회) -->
	<select id="selectMyEvaluList" resultMap="formEmpMyList">
 			SELECT DISTINCT f.EVALU_NAME
		 					, f.EVALU_FORM_NO
					        , f.EVALU_START
					        , f.EVALU_END
					        , t.TEAM_NAME
					        , f.USAGE_STATUS
					        , f.EVALU_START
					        , f.EVALU_END 
					FROM EMPLOYEE u
					JOIN EVALUATEE_GROUP eg
					ON eg.USER_NO = u.USER_NO
					JOIN EVALU_FORM f
					ON eg.EVALU_FORM_NO = f.EVALU_FORM_NO
					JOIN TEAM t
					ON t.TEAM_NO = u.TEAM_NO
					WHERE f.EVALU_FORM_NO IN ( SELECT EVALU_FORM_NO
					                            FROM EVALU_GROUP
					                            WHERE USER_NO = #{userNo} )
					ORDER BY f.EVALU_FORM_NO DESC
	</select>
	
		<resultMap id="formEmpMyList" type="EvaluVO">
			  <id property="evaluFormNo" column="evalu_form_no" />
			  <result property="usageStatus" column="usage_status" />
			  <result property="evaluName" column="evalu_name" />
			  <result property="evaluStart" column="evalu_start" />
			  <result property="evaluEnd" column="evalu_end" />
              <result property="teamName" column="team_name" />
		</resultMap>
	<!-- 평가 폼 등록 시 필요한 항목과 내용 선택하기 위한 조회 쿼리문 -->
	<select id="selectContentList" resultType="EvaluVO">
			SELECT EVALU_ITEM_NO
		        ,  EVALU_COMPET
		        ,  EVALU_CONTENT
			FROM EVALU_ITEM   
	</select>
	<!-- 평가자 기반 평가자 직급, 이름, 팀명, 부서명, 폼 번호 쿼리문 -->
	<select id="selectEvaluInfoById" resultType="EvaluVO">
		SELECT
			d.DEPARTMENT_ID 
	        , u.USER_POSITION 
	        , u.USER_NAME  
	        , t.TEAM_NAME 
	        , d.DEPARTMENT_NAME 
	        , f.EVALU_FORM_NO
			, t.TEAM_NO
		FROM EMPLOYEE u 
		JOIN TEAM t ON u.TEAM_NO = t.TEAM_NO 
		JOIN DEPARTMENT d ON d.DEPARTMENT_ID = t.DEPARTMENT_ID 
		JOIN EVALU_GROUP g ON g.USER_NO = u.USER_NO  
		JOIN EVALU_FORM f ON g.EVALU_FORM_NO = f.EVALU_FORM_NO 
		WHERE f.EVALU_FORM_NO = #{evaluFormNo}
	</select>
	
	<!-- 피평가자 기반 평가자 직급, 이름, 팀명, 부서명, 폼 번호 쿼리문-->
	<select id="selectEvaluateeInfoById" resultType="EvaluVO">
		SELECT 
			d.DEPARTMENT_ID 
	        , u.USER_POSITION 
	        , f.EVALU_FORM_NO 
	        , u.USER_NAME
	        , t.TEAM_NAME 
	        , d.DEPARTMENT_NAME
	        , t.TEAM_NO
		FROM EMPLOYEE u 
		JOIN TEAM t ON u.TEAM_NO = t.TEAM_NO 
		JOIN DEPARTMENT d ON d.DEPARTMENT_ID = t.DEPARTMENT_ID 
		JOIN EVALUATEE_GROUP evg ON evg.USER_NO = u.USER_NO 
		JOIN EVALU_FORM f ON evg.EVALU_FORM_NO = f.EVALU_FORM_NO 
		WHERE f.EVALU_FORM_NO = #{evaluFormNo}
	</select>

	<!-- 부서명과 팀명 조회 쿼리문 -->
	<select id="selectTeamList" resultType="EmpVO">
		SELECT t.team_no
		        , t.team_name
		        , d.department_name
		        , t.department_id
		FROM team t 
		JOIN department d 
		ON t.department_id = d.department_id
	</select>
	
	<!-- 새 평가 등록 : form 부분 -->
	<insert id="insertEvaluForm" parameterType="EvaluVO">
		<selectKey keyProperty="evaluFormNo"
			   resultType="Integer"
			   order="BEFORE">
		 	SELECT MAX(EVALU_FORM_NO) + 1
       		FROM EVALU_FORM
		</selectKey>
		INSERT INTO EVALU_FORM
					(EVALU_FORM_NO
		            , EVALU_NAME
		            , INSERT_DATE
		            , EVALU_START
		            , EVALU_END
		            , USAGE_STATUS)
		VALUES 	(EVALU_FORM_NO_SEQ.NEXTVAL
		            , #{evaluName}
		            , SYSDATE
		            , #{evaluStart}
		            , #{evaluEnd}
		            , '진행 중')
	</insert>
	<!-- 새 평가 등록 : format 부분 -->
	<insert id="insertEvaluFormat" parameterType="EvaluVO">	
      	INSERT INTO EVALU_FORMAT
			(EVALU_NO
			, ORDER_NO
			, EVALU_ITEM_NO
			, EVALU_FORM_NO)
			
		VALUES ( EVALU_NO_SEQ.NEXTVAL
			, #{orderNo}
			, #{evaluItemNo}
			, #{evaluFormNo}
			)
	</insert>
	<!-- 새 평가 등록 : 평가자 그룹 아이디 => 조회는 사원 번호와 평가 폼 번호로 -->
	<insert id="insertEvaluGroup" parameterType="EvaluVO">
			INSERT INTO EVALU_GROUP
			(
			    EVALU_GROUP_ID
			    , EVALU_FORM_NO
			    , USER_NO                
			)
			SELECT 
			    EVALU_G_ID_SEQ.NEXTVAL
			    , #{evaluFormNo}
			    , u.user_no
			FROM EMPLOYEE u 
			JOIN TEAM t ON u.team_no = t.team_no
			WHERE t.team_no = #{evaluGroupId}
	</insert>
	<!-- 새 평가 등록 : 피평가자 그룹 아이디 -->
	<insert id="insertEvaluateeGroup" parameterType="EvaluVO">
		INSERT INTO EVALUATEE_GROUP
		(
		    EVALUATEE_GROUP_ID
		    , EVALU_FORM_NO
		    , USER_NO                
		)
		SELECT 
		    EVALUATEE_G_ID_SEQ.NEXTVAL
		    , #{evaluFormNo}
		    , u.user_no
		FROM EMPLOYEE u 
		JOIN TEAM t ON u.team_no = t.team_no
		WHERE t.team_no = #{evaluateeGroupId}
	</insert>

	<!-- 평가 진행 : 평가 결과 테이블에 insert-->
	<insert id="insertEvaluScore" parameterType="EvaluVO">
		INSERT INTO EVALU_RESULT
	            ( EVALU_RESULT_ID
	             , EVALU_SCORE
	             , EVALU_DATE 
	             , EVALU_GROUP_ID 
	             , EVALUATEE_GROUP_ID
	             , EVALU_NO
	             , EVALU_FORM_NO
	             , ORDER_NO
	             , USER_NO    )
		VALUES ( EVALU_RESULT_ID_SEQ.NEXTVAL 
		       , #{evaluScore}
		       , SYSDATE
		       , #{evaluGroupId}
		       , #{evaluateeGroupId}
		       , #{evaluNo}
		       , #{evaluFormNo}
		       , #{orderNo}
		       , #{userNo} )
	</insert>
	
	<!-- 평가 제출 후 평가 상태 '평가 완료' 로 수정하는 쿼리문 -->
	<update id="updateEvaluStatus" parameterType="EvaluVO">
		UPDATE EVALU_FORM 
		SET USAGE_STATUS = '평가 완료'
	</update>
	<!-- 평가 상태 조회 쿼리 -->
	<select id="getEvaluStatus" resultType="String" parameterType="int">
	    SELECT USAGE_STATUS
	    FROM EVALU_FORM
	    WHERE EVALU_FORM_NO = #{formNo}
	</select>
	
	<!-- 피평가자 : loginUser인 평가(평균) -->
	<select id="selectMyReceivedAvgScore" resultType="EvaluVO">
			SELECT
			    i.EVALU_COMPET,
			    i.EVALU_CONTENT,
			    AVG(r.EVALU_SCORE) AS evaluScore,
			    fm.ORDER_NO
			FROM EVALU_RESULT r
			JOIN EVALUATEE_GROUP g
			    ON r.EVALUATEE_GROUP_ID = g.EVALUATEE_GROUP_ID
			JOIN EVALU_FORMAT fm
			    ON r.EVALU_NO = fm.EVALU_NO
			JOIN EVALU_ITEM i
			    ON fm.EVALU_ITEM_NO = i.EVALU_ITEM_NO
			WHERE g.USER_NO = #{userNo}               
			  AND r.EVALU_FORM_NO = #{evaluFormNo}    
			GROUP BY i.EVALU_COMPET, i.EVALU_CONTENT, fm.ORDER_NO
			ORDER BY fm.ORDER_NO
</select>
<!-- 내가 피평가자로 등록된 평가 리스트 -->
	<select id="selectMyEvaluResultList" resultMap="myEvaluResultList">
		SELECT 
		    f.EVALU_NAME,
		    f.EVALU_FORM_NO,
		    f.EVALU_START,
		    f.EVALU_END,
		    t.TEAM_NAME,
		    f.USAGE_STATUS
		FROM EVALUATEE_GROUP eg
		JOIN EVALU_FORM f ON eg.EVALU_FORM_NO = f.EVALU_FORM_NO
		JOIN EMPLOYEE u ON eg.USER_NO = u.USER_NO
		JOIN TEAM t ON t.TEAM_NO = u.TEAM_NO
		WHERE eg.USER_NO = #{userNo}
		ORDER BY f.EVALU_FORM_NO DESC
	</select>
	
		<resultMap id="myEvaluResultList" type="EvaluVO">
		<id property="evaluFormNo" column="evalu_form_no" />
		  <result property="usageStatus" column="usage_status" />
			<result property="evaluName" column="evalu_name" />
				<result property="evaluStart" column="evalu_start" />
				<result property="evaluEnd" column="evalu_end" />
				<collection property="teamList" ofType="teamVO">
					<result property="teamName" column="team_name" />
				</collection>
	</resultMap>
	
	<!-- 내가 평가 받은 평가 단건 조회 -->
	<select id="selectMyEvaluScoreResultById" resultType="EvaluVO">
			SELECT 
			    u.USER_NO,
			    u.USER_NAME,
			    i.EVALU_COMPET,
			    i.EVALU_CONTENT,
			    d.DEPARTMENT_NAME,
			    t.TEAM_NAME,
			    f.EVALU_NAME,
			    ROUND(AVG(r.EVALU_SCORE), 1) AS avgScore,  -- 내 평균 점수
			    (SELECT ROUND(AVG(r2.EVALU_SCORE), 1) 
			     FROM EVALU_RESULT r2
			     JOIN EVALUATEE_GROUP g2 ON r2.EVALUATEE_GROUP_ID = g2.EVALUATEE_GROUP_ID
			     WHERE g2.EVALU_FORM_NO = #{evaluFormNo} 
			       AND g2.USER_NO != #{userNo}) AS otherAvgScore,  -- 다른 사원들의 평균 점수
			    fm.ORDER_NO
			FROM EVALU_FORM f
			JOIN EVALUATEE_GROUP g ON f.EVALU_FORM_NO = g.EVALU_FORM_NO
			JOIN EMPLOYEE u ON g.USER_NO = u.USER_NO
			JOIN EVALU_FORMAT fm ON fm.EVALU_FORM_NO = f.EVALU_FORM_NO
			JOIN EVALU_ITEM i ON i.EVALU_ITEM_NO = fm.EVALU_ITEM_NO
			JOIN EVALU_RESULT r ON r.EVALU_NO = fm.EVALU_NO 
			                     AND r.EVALUATEE_GROUP_ID = g.EVALUATEE_GROUP_ID
			JOIN TEAM t ON t.team_no = u.team_no
			JOIN DEPARTMENT d ON d.department_id = t.department_id
			WHERE f.EVALU_FORM_NO = #{evaluFormNo}
			  AND u.USER_NO = #{userNo}
			GROUP BY 
			    u.USER_NO,
			    u.USER_NAME,
			    i.EVALU_COMPET,
			    i.EVALU_CONTENT,
			    fm.ORDER_NO,
			    d.DEPARTMENT_NAME,
			    f.EVALU_NAME,
			    t.TEAM_NAME
			ORDER BY fm.ORDER_NO

	</select>
	

	

</mapper>