<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.workmate.app.attendance.mapper.AttendMapper">

	<!-- 해당 월별조회 -->
		<select id="selectWorkList" resultType="WorkVO">	
		    SELECT start_work,
		           after_work,
		           work_time,
		           work_status,
		           work_no,
		           late_reason,
		           add_work_time,
		           (SELECT COUNT(*) 
		            FROM work 
		            WHERE EXTRACT(YEAR FROM start_work) = EXTRACT(YEAR FROM SYSDATE)
		              AND EXTRACT(MONTH FROM start_work) = EXTRACT(MONTH FROM SYSDATE)
		              AND work_status <![CDATA[<>]]> '정상'
		              AND user_no = #{userNo}) 
		              AS status_count
		    FROM work
		    WHERE EXTRACT(YEAR FROM start_work) = EXTRACT(YEAR FROM SYSDATE)
		      AND EXTRACT(MONTH FROM start_work) = EXTRACT(MONTH FROM SYSDATE)
		      AND user_no = #{userNo}
		    ORDER BY start_work DESC
		</select>
	
	
	<!-- 전체조회 -->
	<select id="allWorkList" resultType="WorkVO">
	    SELECT start_work,
	           after_work,
	           work_time,
	           work_status,
	           add_work_time,
	           late_reason
	    FROM work
	    WHERE user_no = #{userNo}
	    AND 1 = 1
    <if test="stDate != null and endDate != null">
        AND start_work >= #{stDate} AND  start_work <![CDATA[<]]> #{endDate} + 1
    </if>
	    ORDER BY start_work DESC
	</select>
	
	
	<!-- 출퇴근여부 -->
	<select id="attendanceStatus" resultType="workVO">
	    SELECT start_work, after_work, work_no
	    FROM WORK
	    WHERE TRUNC(start_work) = TRUNC(sysdate)
	    AND user_no = #{userNo}
	</select>
	
	<!-- 출근 등록 -->
	<insert id="insertStartInfo" parameterType="WorkVO">
		<selectKey keyProperty="workNo"  resultType="Integer" order="BEFORE">
			 SELECT MAX(WORK_NO) + 1
	         FROM WORK
		</selectKey>
		INSERT INTO WORK 
		(
    		work_status
    		, start_work
    		, work_no
     		, user_no
		) VALUES 
		(
			CASE 
       			 WHEN TO_CHAR(SYSDATE, 'HH24:MI') <![CDATA[<]]> '09:01' THEN '정상'
			     ELSE '지각' 
			  END
			, SYSDATE
			, #{workNo}
			, #{userNo}
		)
	</insert>
	
	<!-- 퇴근 등록  -->
	<update id="insertAfterInfo" parameterType="WorkVO">
		UPDATE WORK
		SET 
		   after_work = SYSDATE,
		   work_time = 
	    	CASE
	    		WHEN TO_CHAR(SYSDATE, 'HH24') >= '14' THEN ROUND((SYSDATE - start_work) * 24, 1) - 1
	    		ELSE ROUND((SYSDATE - start_work) * 24, 1)
	    	END,
		    add_work_time = F_ADD_WORK_TIME(SYSDATE),
		    work_status = 
		    	CASE
			    	WHEN TO_CHAR(SYSDATE, 'HH24:MI') <![CDATA[<]]> '17:59' THEN '조퇴'
			    	ELSE NVL(work_status, '정상') <!-- 원래값이 있으면 그대로 두고 없으면 정상으로 등록 -->
		   		END
		WHERE work_no = #{workNo}
	</update>	
	
	<!-- 지각 사유 등록 -->
	<update id="insertLateReason" parameterType="WorkVO">
		UPDATE WORK
		SET 
			late_reason = #{lateReason}
		WHERE work_no = #{workNo}
	</update>
	
	<!-- 연차 조회 -->
	<select id="occAnnualList" resultType="WorkVO">
	    SELECT occ_annual,
	           used_annual_count,
	           remain_anl_leave
	    FROM occ_annual
	    WHERE user_no = #{userNo}
	    	AND use_annual_year = EXTRACT(YEAR FROM SYSDATE) <!-- 현재년도만 조회 -->
	</select>
	
	<!-- 연차 사용내역 전체조회 -->
	<select id="allAnnualList" resultType="WorkVO">
		SELECT a.annual_start, a.annual_count, a.annual_type,
		       b.appr_date, b.appr_content
		FROM annual a 
		INNER JOIN approval b 
		ON a.appr_no = b.appr_no
		WHERE TO_NUMBER(a.user_no) = #{userNo}
		AND 1 = 1
	<if test="stDate != null and endDate != null">
        AND annual_start BETWEEN #{stDate} AND #{endDate} + 1
    </if>
		ORDER BY annual_no DESC
	</select>
	
	<!-- 연차 사용내역 단건조회 -->
	<select id="selectAnnualByApprNo" resultType="WorkVO">
		SELECT annual_start
		    , annual_end
		    , annual_count
		    , annual_type
		    , appr_date
		    , appr_content 
		FROM annual
		    INNER JOIN approval
		        ON annual.appr_no = approval.appr_no
		WHERE annual.appr_no = #{apprNo}
	</select>
	
	<!-- 연차휴가 신청 내역 등록 -->
	<insert id="insertAnl" parameterType="WorkVO">
		<selectKey keyProperty="annualNo" resultType="String" order="BEFORE">
			SELECT NVL(MAX(TO_NUMBER(annual_no)), 0) + 1
			FROM annual
		</selectKey>
	    INSERT INTO annual(ANNUAL_NO
	        , ANNUAL_START
	        , ANNUAL_END
	        , ANNUAL_COUNT
	        , ANNUAL_TYPE
	        , USER_NO        
	        , APPR_NO
	        , OCC_ANNUAL_NO
	    )
	    VALUES(#{annualNo}
	        , #{annualStart}
	        , #{annualEnd}
	        , CASE 
            	WHEN INSTR(#{annualType}, '반차') > 0 THEN 0.5 --오전반차, 오후반차면 0.5
            	ELSE TRUNC(#{annualEnd}) - TRUNC(#{annualStart}) + 1
        	END
	        , #{annualType}
	        , #{userNo}
	        , #{apprNo}
	        , (SELECT MAX(OCC_ANNUAL_NO) FROM occ_annual WHERE USER_NO = #{userNo})
	    )
	</insert>
	
	
	<!-- 연차 업데이트 전자결재 -->
	<update id="updateOccList" parameterType="int">
		UPDATE occ_annual
		SET used_annual_count = used_annual_count + 
		    CASE 
		        WHEN INSTR(#{annualType}, '반차') > 0 THEN 0.5
		        ELSE #{annualCount}
		    END,
		    remain_anl_leave = remain_anl_leave - 
		    CASE 
		        WHEN INSTR(#{annualType}, '반차') > 0 THEN 0.5
		        ELSE #{annualCount}
		    END
		WHERE user_no = #{userNo}
		AND use_annual_year = EXTRACT(YEAR FROM SYSDATE)
	</update>
	
	<!-- 전체사원 이번달 근태 -->
	<select id="selectMonthEmpList" resultType="WorkVO">
		SELECT 

    (
        SELECT COUNT(*) 
        FROM work 
        WHERE EXTRACT(YEAR FROM start_work) = EXTRACT(YEAR FROM SYSDATE)
          AND EXTRACT(MONTH FROM start_work) = EXTRACT(MONTH FROM SYSDATE)
          AND (work_status = '지각' OR work_status = '조퇴')
    ) AS all_status_count,

   
    (
        SELECT COUNT(*)
        FROM work
        WHERE EXTRACT(YEAR FROM start_work) = EXTRACT(YEAR FROM SYSDATE)
          AND EXTRACT(MONTH FROM start_work) = EXTRACT(MONTH FROM SYSDATE)
          AND start_work IS NULL
    ) AS nstart_count,

   
    (
        SELECT COUNT(*)
        FROM work
        WHERE EXTRACT(YEAR FROM start_work) = EXTRACT(YEAR FROM SYSDATE)
          AND EXTRACT(MONTH FROM start_work) = EXTRACT(MONTH FROM SYSDATE)
          AND after_work IS NULL
    ) AS nafter_count,

   
    (
        SELECT COUNT(*)
        FROM work
        WHERE EXTRACT(YEAR FROM start_work) = EXTRACT(YEAR FROM SYSDATE)
          AND EXTRACT(MONTH FROM start_work) = EXTRACT(MONTH FROM SYSDATE)
          AND (add_work_time IS NOT NULL AND add_work_time != 0) 
    ) AS add_work_count

  FROM dual
	</select>
	
	
	<!-- 전체사원 근태조회 -->
	<select id="selectAllEmpList" resultType="WorkVO">
		SELECT t.team_name,               
		       e.user_name,              
		       w.start_work,             
		       w.after_work,             
		       w.work_time,
		       w.add_work_time,               
		       w.work_status,
		       w.late_reason           
		FROM work w
		JOIN employee e ON w.user_no = e.user_no  
		JOIN team t ON e.team_no = t.team_no  
		WHERE 1 = 1
		<if test="stDate != null and endDate != null">
		    AND w.start_work >= #{stDate} AND w.start_work <![CDATA[<]]> #{endDate} +1
		</if>
		  <if test="userName != null and userName != ''">
        	AND e.user_name LIKE '%' || #{userName} || '%'
	    </if>
	    <if test="teamName != null and teamName != ''">
	        AND t.team_name LIKE '%' || #{teamName} || '%'
	    </if>
		ORDER BY start_work DESC
	</select>
	
	<!-- 필터링 전체사원 -->
	<select id="selectFilterEmpList" resultType="WorkVO">
			SELECT t.team_name,               
		       e.user_name,              
		       w.start_work,             
		       w.after_work,             
		       w.work_time,
		       w.add_work_time,               
		       w.work_status              
		FROM work w
		JOIN employee e ON w.user_no = e.user_no  
		JOIN team t ON e.team_no = t.team_no  
		WHERE 1 = 1
		<if test="stDate != null and endDate != null">
		    AND w.start_work >= #{stDate} AND w.start_work <![CDATA[<]]> #{endDate}
		</if>
		  <if test="userName != null and userName != ''">
        	AND e.user_name LIKE '%' || #{userName} || '%'
	    </if>
	    <if test="teamName != null and teamName != ''">
	        AND t.team_name LIKE '%' || #{teamName} || '%'
	    </if>
		ORDER BY start_work DESC
	
	</select>

</mapper>